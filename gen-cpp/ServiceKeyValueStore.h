/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ServiceKeyValueStore_H
#define ServiceKeyValueStore_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "package_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServiceKeyValueStoreIf {
 public:
  virtual ~ServiceKeyValueStoreIf() {}
  virtual void getApi(MsgGetResponse& _return, const MsgGetRequest& msgGetRequest) = 0;
  virtual void putApi(MsgSetResponse& _return, const MsgSetRequest& msgSetRequest) = 0;
  virtual void removeApi(MsgRemoveResponse& _return, const MsgRemoveRequest& msgRemoveRequest) = 0;
  virtual void existApi(MsgExistResponse& _return, const MsgExistRequest& msgExistRequest) = 0;
};

class ServiceKeyValueStoreIfFactory {
 public:
  typedef ServiceKeyValueStoreIf Handler;

  virtual ~ServiceKeyValueStoreIfFactory() {}

  virtual ServiceKeyValueStoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceKeyValueStoreIf* /* handler */) = 0;
};

class ServiceKeyValueStoreIfSingletonFactory : virtual public ServiceKeyValueStoreIfFactory {
 public:
  ServiceKeyValueStoreIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ServiceKeyValueStoreIf>& iface) : iface_(iface) {}
  virtual ~ServiceKeyValueStoreIfSingletonFactory() {}

  virtual ServiceKeyValueStoreIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceKeyValueStoreIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServiceKeyValueStoreIf> iface_;
};

class ServiceKeyValueStoreNull : virtual public ServiceKeyValueStoreIf {
 public:
  virtual ~ServiceKeyValueStoreNull() {}
  void getApi(MsgGetResponse& /* _return */, const MsgGetRequest& /* msgGetRequest */) {
    return;
  }
  void putApi(MsgSetResponse& /* _return */, const MsgSetRequest& /* msgSetRequest */) {
    return;
  }
  void removeApi(MsgRemoveResponse& /* _return */, const MsgRemoveRequest& /* msgRemoveRequest */) {
    return;
  }
  void existApi(MsgExistResponse& /* _return */, const MsgExistRequest& /* msgExistRequest */) {
    return;
  }
};

typedef struct _ServiceKeyValueStore_getApi_args__isset {
  _ServiceKeyValueStore_getApi_args__isset() : msgGetRequest(false) {}
  bool msgGetRequest :1;
} _ServiceKeyValueStore_getApi_args__isset;

class ServiceKeyValueStore_getApi_args {
 public:

  ServiceKeyValueStore_getApi_args(const ServiceKeyValueStore_getApi_args&);
  ServiceKeyValueStore_getApi_args& operator=(const ServiceKeyValueStore_getApi_args&);
  ServiceKeyValueStore_getApi_args() {
  }

  virtual ~ServiceKeyValueStore_getApi_args() throw();
  MsgGetRequest msgGetRequest;

  _ServiceKeyValueStore_getApi_args__isset __isset;

  void __set_msgGetRequest(const MsgGetRequest& val);

  bool operator == (const ServiceKeyValueStore_getApi_args & rhs) const
  {
    if (!(msgGetRequest == rhs.msgGetRequest))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_getApi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_getApi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceKeyValueStore_getApi_pargs {
 public:


  virtual ~ServiceKeyValueStore_getApi_pargs() throw();
  const MsgGetRequest* msgGetRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_getApi_result__isset {
  _ServiceKeyValueStore_getApi_result__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_getApi_result__isset;

class ServiceKeyValueStore_getApi_result {
 public:

  ServiceKeyValueStore_getApi_result(const ServiceKeyValueStore_getApi_result&);
  ServiceKeyValueStore_getApi_result& operator=(const ServiceKeyValueStore_getApi_result&);
  ServiceKeyValueStore_getApi_result() {
  }

  virtual ~ServiceKeyValueStore_getApi_result() throw();
  MsgGetResponse success;

  _ServiceKeyValueStore_getApi_result__isset __isset;

  void __set_success(const MsgGetResponse& val);

  bool operator == (const ServiceKeyValueStore_getApi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_getApi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_getApi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_getApi_presult__isset {
  _ServiceKeyValueStore_getApi_presult__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_getApi_presult__isset;

class ServiceKeyValueStore_getApi_presult {
 public:


  virtual ~ServiceKeyValueStore_getApi_presult() throw();
  MsgGetResponse* success;

  _ServiceKeyValueStore_getApi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ServiceKeyValueStore_putApi_args__isset {
  _ServiceKeyValueStore_putApi_args__isset() : msgSetRequest(false) {}
  bool msgSetRequest :1;
} _ServiceKeyValueStore_putApi_args__isset;

class ServiceKeyValueStore_putApi_args {
 public:

  ServiceKeyValueStore_putApi_args(const ServiceKeyValueStore_putApi_args&);
  ServiceKeyValueStore_putApi_args& operator=(const ServiceKeyValueStore_putApi_args&);
  ServiceKeyValueStore_putApi_args() {
  }

  virtual ~ServiceKeyValueStore_putApi_args() throw();
  MsgSetRequest msgSetRequest;

  _ServiceKeyValueStore_putApi_args__isset __isset;

  void __set_msgSetRequest(const MsgSetRequest& val);

  bool operator == (const ServiceKeyValueStore_putApi_args & rhs) const
  {
    if (!(msgSetRequest == rhs.msgSetRequest))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_putApi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_putApi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceKeyValueStore_putApi_pargs {
 public:


  virtual ~ServiceKeyValueStore_putApi_pargs() throw();
  const MsgSetRequest* msgSetRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_putApi_result__isset {
  _ServiceKeyValueStore_putApi_result__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_putApi_result__isset;

class ServiceKeyValueStore_putApi_result {
 public:

  ServiceKeyValueStore_putApi_result(const ServiceKeyValueStore_putApi_result&);
  ServiceKeyValueStore_putApi_result& operator=(const ServiceKeyValueStore_putApi_result&);
  ServiceKeyValueStore_putApi_result() {
  }

  virtual ~ServiceKeyValueStore_putApi_result() throw();
  MsgSetResponse success;

  _ServiceKeyValueStore_putApi_result__isset __isset;

  void __set_success(const MsgSetResponse& val);

  bool operator == (const ServiceKeyValueStore_putApi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_putApi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_putApi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_putApi_presult__isset {
  _ServiceKeyValueStore_putApi_presult__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_putApi_presult__isset;

class ServiceKeyValueStore_putApi_presult {
 public:


  virtual ~ServiceKeyValueStore_putApi_presult() throw();
  MsgSetResponse* success;

  _ServiceKeyValueStore_putApi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ServiceKeyValueStore_removeApi_args__isset {
  _ServiceKeyValueStore_removeApi_args__isset() : msgRemoveRequest(false) {}
  bool msgRemoveRequest :1;
} _ServiceKeyValueStore_removeApi_args__isset;

class ServiceKeyValueStore_removeApi_args {
 public:

  ServiceKeyValueStore_removeApi_args(const ServiceKeyValueStore_removeApi_args&);
  ServiceKeyValueStore_removeApi_args& operator=(const ServiceKeyValueStore_removeApi_args&);
  ServiceKeyValueStore_removeApi_args() {
  }

  virtual ~ServiceKeyValueStore_removeApi_args() throw();
  MsgRemoveRequest msgRemoveRequest;

  _ServiceKeyValueStore_removeApi_args__isset __isset;

  void __set_msgRemoveRequest(const MsgRemoveRequest& val);

  bool operator == (const ServiceKeyValueStore_removeApi_args & rhs) const
  {
    if (!(msgRemoveRequest == rhs.msgRemoveRequest))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_removeApi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_removeApi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceKeyValueStore_removeApi_pargs {
 public:


  virtual ~ServiceKeyValueStore_removeApi_pargs() throw();
  const MsgRemoveRequest* msgRemoveRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_removeApi_result__isset {
  _ServiceKeyValueStore_removeApi_result__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_removeApi_result__isset;

class ServiceKeyValueStore_removeApi_result {
 public:

  ServiceKeyValueStore_removeApi_result(const ServiceKeyValueStore_removeApi_result&);
  ServiceKeyValueStore_removeApi_result& operator=(const ServiceKeyValueStore_removeApi_result&);
  ServiceKeyValueStore_removeApi_result() {
  }

  virtual ~ServiceKeyValueStore_removeApi_result() throw();
  MsgRemoveResponse success;

  _ServiceKeyValueStore_removeApi_result__isset __isset;

  void __set_success(const MsgRemoveResponse& val);

  bool operator == (const ServiceKeyValueStore_removeApi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_removeApi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_removeApi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_removeApi_presult__isset {
  _ServiceKeyValueStore_removeApi_presult__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_removeApi_presult__isset;

class ServiceKeyValueStore_removeApi_presult {
 public:


  virtual ~ServiceKeyValueStore_removeApi_presult() throw();
  MsgRemoveResponse* success;

  _ServiceKeyValueStore_removeApi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ServiceKeyValueStore_existApi_args__isset {
  _ServiceKeyValueStore_existApi_args__isset() : msgExistRequest(false) {}
  bool msgExistRequest :1;
} _ServiceKeyValueStore_existApi_args__isset;

class ServiceKeyValueStore_existApi_args {
 public:

  ServiceKeyValueStore_existApi_args(const ServiceKeyValueStore_existApi_args&);
  ServiceKeyValueStore_existApi_args& operator=(const ServiceKeyValueStore_existApi_args&);
  ServiceKeyValueStore_existApi_args() {
  }

  virtual ~ServiceKeyValueStore_existApi_args() throw();
  MsgExistRequest msgExistRequest;

  _ServiceKeyValueStore_existApi_args__isset __isset;

  void __set_msgExistRequest(const MsgExistRequest& val);

  bool operator == (const ServiceKeyValueStore_existApi_args & rhs) const
  {
    if (!(msgExistRequest == rhs.msgExistRequest))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_existApi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_existApi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ServiceKeyValueStore_existApi_pargs {
 public:


  virtual ~ServiceKeyValueStore_existApi_pargs() throw();
  const MsgExistRequest* msgExistRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_existApi_result__isset {
  _ServiceKeyValueStore_existApi_result__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_existApi_result__isset;

class ServiceKeyValueStore_existApi_result {
 public:

  ServiceKeyValueStore_existApi_result(const ServiceKeyValueStore_existApi_result&);
  ServiceKeyValueStore_existApi_result& operator=(const ServiceKeyValueStore_existApi_result&);
  ServiceKeyValueStore_existApi_result() {
  }

  virtual ~ServiceKeyValueStore_existApi_result() throw();
  MsgExistResponse success;

  _ServiceKeyValueStore_existApi_result__isset __isset;

  void __set_success(const MsgExistResponse& val);

  bool operator == (const ServiceKeyValueStore_existApi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ServiceKeyValueStore_existApi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceKeyValueStore_existApi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceKeyValueStore_existApi_presult__isset {
  _ServiceKeyValueStore_existApi_presult__isset() : success(false) {}
  bool success :1;
} _ServiceKeyValueStore_existApi_presult__isset;

class ServiceKeyValueStore_existApi_presult {
 public:


  virtual ~ServiceKeyValueStore_existApi_presult() throw();
  MsgExistResponse* success;

  _ServiceKeyValueStore_existApi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServiceKeyValueStoreClient : virtual public ServiceKeyValueStoreIf {
 public:
  ServiceKeyValueStoreClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiceKeyValueStoreClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getApi(MsgGetResponse& _return, const MsgGetRequest& msgGetRequest);
  void send_getApi(const MsgGetRequest& msgGetRequest);
  void recv_getApi(MsgGetResponse& _return);
  void putApi(MsgSetResponse& _return, const MsgSetRequest& msgSetRequest);
  void send_putApi(const MsgSetRequest& msgSetRequest);
  void recv_putApi(MsgSetResponse& _return);
  void removeApi(MsgRemoveResponse& _return, const MsgRemoveRequest& msgRemoveRequest);
  void send_removeApi(const MsgRemoveRequest& msgRemoveRequest);
  void recv_removeApi(MsgRemoveResponse& _return);
  void existApi(MsgExistResponse& _return, const MsgExistRequest& msgExistRequest);
  void send_existApi(const MsgExistRequest& msgExistRequest);
  void recv_existApi(MsgExistResponse& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiceKeyValueStoreProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServiceKeyValueStoreIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServiceKeyValueStoreProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getApi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putApi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeApi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_existApi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiceKeyValueStoreProcessor(::apache::thrift::stdcxx::shared_ptr<ServiceKeyValueStoreIf> iface) :
    iface_(iface) {
    processMap_["getApi"] = &ServiceKeyValueStoreProcessor::process_getApi;
    processMap_["putApi"] = &ServiceKeyValueStoreProcessor::process_putApi;
    processMap_["removeApi"] = &ServiceKeyValueStoreProcessor::process_removeApi;
    processMap_["existApi"] = &ServiceKeyValueStoreProcessor::process_existApi;
  }

  virtual ~ServiceKeyValueStoreProcessor() {}
};

class ServiceKeyValueStoreProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiceKeyValueStoreProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ServiceKeyValueStoreIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ServiceKeyValueStoreIfFactory > handlerFactory_;
};

class ServiceKeyValueStoreMultiface : virtual public ServiceKeyValueStoreIf {
 public:
  ServiceKeyValueStoreMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ServiceKeyValueStoreIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiceKeyValueStoreMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ServiceKeyValueStoreIf> > ifaces_;
  ServiceKeyValueStoreMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ServiceKeyValueStoreIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getApi(MsgGetResponse& _return, const MsgGetRequest& msgGetRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getApi(_return, msgGetRequest);
    }
    ifaces_[i]->getApi(_return, msgGetRequest);
    return;
  }

  void putApi(MsgSetResponse& _return, const MsgSetRequest& msgSetRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putApi(_return, msgSetRequest);
    }
    ifaces_[i]->putApi(_return, msgSetRequest);
    return;
  }

  void removeApi(MsgRemoveResponse& _return, const MsgRemoveRequest& msgRemoveRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeApi(_return, msgRemoveRequest);
    }
    ifaces_[i]->removeApi(_return, msgRemoveRequest);
    return;
  }

  void existApi(MsgExistResponse& _return, const MsgExistRequest& msgExistRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->existApi(_return, msgExistRequest);
    }
    ifaces_[i]->existApi(_return, msgExistRequest);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServiceKeyValueStoreConcurrentClient : virtual public ServiceKeyValueStoreIf {
 public:
  ServiceKeyValueStoreConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiceKeyValueStoreConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getApi(MsgGetResponse& _return, const MsgGetRequest& msgGetRequest);
  int32_t send_getApi(const MsgGetRequest& msgGetRequest);
  void recv_getApi(MsgGetResponse& _return, const int32_t seqid);
  void putApi(MsgSetResponse& _return, const MsgSetRequest& msgSetRequest);
  int32_t send_putApi(const MsgSetRequest& msgSetRequest);
  void recv_putApi(MsgSetResponse& _return, const int32_t seqid);
  void removeApi(MsgRemoveResponse& _return, const MsgRemoveRequest& msgRemoveRequest);
  int32_t send_removeApi(const MsgRemoveRequest& msgRemoveRequest);
  void recv_removeApi(MsgRemoveResponse& _return, const int32_t seqid);
  void existApi(MsgExistResponse& _return, const MsgExistRequest& msgExistRequest);
  int32_t send_existApi(const MsgExistRequest& msgExistRequest);
  void recv_existApi(MsgExistResponse& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
