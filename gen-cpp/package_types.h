/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef package_TYPES_H
#define package_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class MsgGetRequest;

class MsgSetRequest;

class MsgRemoveRequest;

class MsgExistRequest;

class MsgGetResponse;

class MsgSetResponse;

class MsgRemoveResponse;

class MsgExistResponse;

typedef struct _MsgGetRequest__isset {
  _MsgGetRequest__isset() : key(false) {}
  bool key :1;
} _MsgGetRequest__isset;

class MsgGetRequest : public virtual ::apache::thrift::TBase {
 public:

  MsgGetRequest(const MsgGetRequest&);
  MsgGetRequest& operator=(const MsgGetRequest&);
  MsgGetRequest() : key() {
  }

  virtual ~MsgGetRequest() throw();
  std::string key;

  _MsgGetRequest__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const MsgGetRequest & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MsgGetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgGetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgGetRequest &a, MsgGetRequest &b);

std::ostream& operator<<(std::ostream& out, const MsgGetRequest& obj);

typedef struct _MsgSetRequest__isset {
  _MsgSetRequest__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _MsgSetRequest__isset;

class MsgSetRequest : public virtual ::apache::thrift::TBase {
 public:

  MsgSetRequest(const MsgSetRequest&);
  MsgSetRequest& operator=(const MsgSetRequest&);
  MsgSetRequest() : key(), value() {
  }

  virtual ~MsgSetRequest() throw();
  std::string key;
  std::string value;

  _MsgSetRequest__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const MsgSetRequest & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MsgSetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgSetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgSetRequest &a, MsgSetRequest &b);

std::ostream& operator<<(std::ostream& out, const MsgSetRequest& obj);

typedef struct _MsgRemoveRequest__isset {
  _MsgRemoveRequest__isset() : key(false) {}
  bool key :1;
} _MsgRemoveRequest__isset;

class MsgRemoveRequest : public virtual ::apache::thrift::TBase {
 public:

  MsgRemoveRequest(const MsgRemoveRequest&);
  MsgRemoveRequest& operator=(const MsgRemoveRequest&);
  MsgRemoveRequest() : key() {
  }

  virtual ~MsgRemoveRequest() throw();
  std::string key;

  _MsgRemoveRequest__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const MsgRemoveRequest & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MsgRemoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgRemoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgRemoveRequest &a, MsgRemoveRequest &b);

std::ostream& operator<<(std::ostream& out, const MsgRemoveRequest& obj);

typedef struct _MsgExistRequest__isset {
  _MsgExistRequest__isset() : key(false) {}
  bool key :1;
} _MsgExistRequest__isset;

class MsgExistRequest : public virtual ::apache::thrift::TBase {
 public:

  MsgExistRequest(const MsgExistRequest&);
  MsgExistRequest& operator=(const MsgExistRequest&);
  MsgExistRequest() : key() {
  }

  virtual ~MsgExistRequest() throw();
  std::string key;

  _MsgExistRequest__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const MsgExistRequest & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MsgExistRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgExistRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgExistRequest &a, MsgExistRequest &b);

std::ostream& operator<<(std::ostream& out, const MsgExistRequest& obj);

typedef struct _MsgGetResponse__isset {
  _MsgGetResponse__isset() : status(false), value(false) {}
  bool status :1;
  bool value :1;
} _MsgGetResponse__isset;

class MsgGetResponse : public virtual ::apache::thrift::TBase {
 public:

  MsgGetResponse(const MsgGetResponse&);
  MsgGetResponse& operator=(const MsgGetResponse&);
  MsgGetResponse() : status(0), value() {
  }

  virtual ~MsgGetResponse() throw();
  int32_t status;
  std::string value;

  _MsgGetResponse__isset __isset;

  void __set_status(const int32_t val);

  void __set_value(const std::string& val);

  bool operator == (const MsgGetResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MsgGetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgGetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgGetResponse &a, MsgGetResponse &b);

std::ostream& operator<<(std::ostream& out, const MsgGetResponse& obj);

typedef struct _MsgSetResponse__isset {
  _MsgSetResponse__isset() : status(false) {}
  bool status :1;
} _MsgSetResponse__isset;

class MsgSetResponse : public virtual ::apache::thrift::TBase {
 public:

  MsgSetResponse(const MsgSetResponse&);
  MsgSetResponse& operator=(const MsgSetResponse&);
  MsgSetResponse() : status(0) {
  }

  virtual ~MsgSetResponse() throw();
  int32_t status;

  _MsgSetResponse__isset __isset;

  void __set_status(const int32_t val);

  bool operator == (const MsgSetResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MsgSetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgSetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgSetResponse &a, MsgSetResponse &b);

std::ostream& operator<<(std::ostream& out, const MsgSetResponse& obj);

typedef struct _MsgRemoveResponse__isset {
  _MsgRemoveResponse__isset() : result(false) {}
  bool result :1;
} _MsgRemoveResponse__isset;

class MsgRemoveResponse : public virtual ::apache::thrift::TBase {
 public:

  MsgRemoveResponse(const MsgRemoveResponse&);
  MsgRemoveResponse& operator=(const MsgRemoveResponse&);
  MsgRemoveResponse() : result(0) {
  }

  virtual ~MsgRemoveResponse() throw();
  bool result;

  _MsgRemoveResponse__isset __isset;

  void __set_result(const bool val);

  bool operator == (const MsgRemoveResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const MsgRemoveResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgRemoveResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgRemoveResponse &a, MsgRemoveResponse &b);

std::ostream& operator<<(std::ostream& out, const MsgRemoveResponse& obj);

typedef struct _MsgExistResponse__isset {
  _MsgExistResponse__isset() : result(false) {}
  bool result :1;
} _MsgExistResponse__isset;

class MsgExistResponse : public virtual ::apache::thrift::TBase {
 public:

  MsgExistResponse(const MsgExistResponse&);
  MsgExistResponse& operator=(const MsgExistResponse&);
  MsgExistResponse() : result(0) {
  }

  virtual ~MsgExistResponse() throw();
  bool result;

  _MsgExistResponse__isset __isset;

  void __set_result(const bool val);

  bool operator == (const MsgExistResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const MsgExistResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgExistResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgExistResponse &a, MsgExistResponse &b);

std::ostream& operator<<(std::ostream& out, const MsgExistResponse& obj);



#endif
