// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ServiceKeyValueStoreHandler.h"

ServiceKeyValueStoreHandler::ServiceKeyValueStoreHandler() {
    // Your initialization goes here
}

ServiceKeyValueStoreHandler::ServiceKeyValueStoreHandler(KeyValueStore<string, string>* bTreeStore) {
    this->bTreeStore = bTreeStore;
}

void ServiceKeyValueStoreHandler::getApi(MsgGetResponse& _return, const MsgGetRequest& msgGetRequest) {

    // Your implementation goes here
    string value;

    if (this->bTreeStore->getValue(msgGetRequest.key, value)) {
        _return.__set_status(1);
        _return.__set_value(value);
    } else {
        _return.__set_status(0);
        _return.__set_value("");
    }


}

void ServiceKeyValueStoreHandler::putApi(MsgSetResponse& _return, const MsgSetRequest& msgSetRequest) {
    // Your implementation goes here
    string key = msgSetRequest.key;
    string value = msgSetRequest.value;
    //    cout << "client send set key: " << key << " value: " << value << endl;
    this->bTreeStore->set(key, value);

    _return.__set_status(1);
}

void ServiceKeyValueStoreHandler::removeApi(MsgRemoveResponse& _return, const MsgRemoveRequest& msgRemoveRequest) {
    // Your implementation goes here
    if (this->bTreeStore->remove(msgRemoveRequest.key)) {
        _return.__set_result(true);
    } else {
        _return.__set_result(false);
    }
}

void ServiceKeyValueStoreHandler::existApi(MsgExistResponse& _return, const MsgExistRequest& msgExistRequest) {
    // Your implementation goes here
    if (this->bTreeStore->exist(msgExistRequest.key)) {
        _return.__set_result(true);
    } else {
        _return.__set_result(false);
    }
}
